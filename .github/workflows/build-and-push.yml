name: Build and Push Images

on:
  push:
    branches:
      - main
      - dev
  workflow_dispatch:

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  ECR_REPOSITORY_PREFIX: ${{ vars.ECR_REPOSITORY_PREFIX }}

jobs:
  docker:
    name: Build & Push ${{ matrix.id }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    strategy:
      matrix:
        include:
          - id: svc-user
            workdir: target-app/backend/svc-user
            dockerfile: target-app/backend/svc-user/Dockerfile
            prebuild: maven
          - id: svc-catalog
            workdir: target-app/backend/svc-catalog
            dockerfile: target-app/backend/svc-catalog/Dockerfile
            prebuild: maven
          - id: svc-order
            workdir: target-app/backend/svc-order
            dockerfile: target-app/backend/svc-order/Dockerfile
            prebuild: maven
          - id: frontend
            workdir: target-app/frontend
            dockerfile: target-app/frontend/Dockerfile
            prebuild: npm
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        id: aws
        uses: ./.github/actions/aws-setup
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Set up JDK 21
        if: matrix.prebuild == 'maven'
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Build backend artifact
        if: matrix.prebuild == 'maven'
        working-directory: ${{ matrix.workdir }}
        run: ./mvnw -B package -DskipTests

      - name: Set up Node.js
        if: matrix.prebuild == 'npm'
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: npm
          cache-dependency-path: ${{ matrix.workdir }}/package-lock.json

      - name: Install frontend dependencies
        if: matrix.prebuild == 'npm'
        working-directory: ${{ matrix.workdir }}
        run: npm ci

      - name: Build frontend bundle
        if: matrix.prebuild == 'npm'
        working-directory: ${{ matrix.workdir }}
        run: npm run build

      - name: Build and push image
        env:
          REGISTRY: ${{ steps.aws.outputs.registry || secrets.ECR_REGISTRY || vars.ECR_REGISTRY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          if [[ -z "${REGISTRY}" ]]; then
            echo "::error::ECR registry not provided. Set repository variable ECR_REGISTRY or secret." >&2
            exit 1
          fi
          if [[ -z "${ECR_REPOSITORY_PREFIX}" ]]; then
            echo "::error::Set repository variable ECR_REPOSITORY_PREFIX (e.g., chaos-lab)." >&2
            exit 1
          fi

          IMAGE_NAME="${REGISTRY}/${ECR_REPOSITORY_PREFIX}-${{ matrix.id }}:${IMAGE_TAG}"
          docker build \
            --file "${{ matrix.dockerfile }}" \
            --tag "${IMAGE_NAME}" \
            "${{ matrix.workdir }}"
          docker push "${IMAGE_NAME}"

      - name: Summarise image
        run: |
          IMAGE_NAME="${{ steps.aws.outputs.registry || secrets.ECR_REGISTRY || vars.ECR_REGISTRY }}/${ECR_REPOSITORY_PREFIX}-${{ matrix.id }}:${GITHUB_SHA}"
          echo "Built and pushed ${IMAGE_NAME}" >> $GITHUB_STEP_SUMMARY
