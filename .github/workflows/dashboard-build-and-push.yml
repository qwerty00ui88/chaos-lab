name: Build and Push Dashboard Images

on:
  push:
    branches:
      - main
      - dev
  workflow_dispatch:

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  ECR_REPOSITORY_PREFIX: ${{ vars.ECR_REPOSITORY_PREFIX }}

jobs:
  build-dashboard:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    strategy:
      matrix:
        include:
          - id: terraform-client
            module: lab-dashboard/backend/terraform-client
            dockerfile: lab-dashboard/backend/terraform-client/Dockerfile
            prebuild: maven
          - id: chaos-injector
            module: lab-dashboard/backend/chaos-injector
            dockerfile: lab-dashboard/backend/chaos-injector/Dockerfile
            prebuild: maven
          - id: log-streamer
            module: lab-dashboard/backend/log-streamer
            dockerfile: lab-dashboard/backend/log-streamer/Dockerfile
            prebuild: maven
          - id: dashboard-frontend
            module: lab-dashboard/frontend
            dockerfile: lab-dashboard/frontend/Dockerfile
            prebuild: npm
            build_args: |
              VITE_LOG_STREAM_URL=/api/logs/stream
              VITE_LOG_STREAM_POST_URL=/api/logs
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        id: aws
        uses: ./.github/actions/aws-setup
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}

      - name: Set up JDK 17
        if: matrix.prebuild == 'maven'
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build backend artifact
        if: matrix.prebuild == 'maven'
        run: mvn -pl ${{ matrix.module }} -am package -DskipTests

      - name: Set up Node.js
        if: matrix.prebuild == 'npm'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
          cache-dependency-path: ${{ matrix.module }}/package-lock.json

      - name: Build frontend bundle
        if: matrix.prebuild == 'npm'
        working-directory: ${{ matrix.module }}
        run: npm ci && npm run build

      - name: Ensure ECR repository exists
        env:
          REGISTRY: ${{ steps.aws.outputs.registry || secrets.ECR_REGISTRY || vars.ECR_REGISTRY }}
          REPO_NAME: ${{ env.ECR_REPOSITORY_PREFIX }}-${{ matrix.id }}
        run: |
          if [[ -z "${REGISTRY}" ]]; then
            echo "::error::ECR registry not provided. Set repository variable ECR_REGISTRY or secret." >&2
            exit 1
          fi
          if [[ -z "${REPO_NAME}" ]]; then
            echo "::error::ECR repository prefix is not set." >&2
            exit 1
          fi
          aws ecr describe-repositories --repository-names "${REPO_NAME}" >/dev/null 2>&1 || \
            aws ecr create-repository --repository-name "${REPO_NAME}"

      - name: Build and push image
        env:
          REGISTRY: ${{ steps.aws.outputs.registry || secrets.ECR_REGISTRY || vars.ECR_REGISTRY }}
          IMAGE_TAG: ${{ github.sha }}
          BUILD_ARGS: ${{ matrix.build_args || '' }}
        run: |
          if [[ -z "${REGISTRY}" ]]; then
            echo "::error::ECR registry not provided." >&2
            exit 1
          fi
          if [[ -z "${ECR_REPOSITORY_PREFIX}" ]]; then
            echo "::error::ECR repository prefix not provided." >&2
            exit 1
          fi

          REPO_NAME="${ECR_REPOSITORY_PREFIX}-${{ matrix.id }}"
          IMAGE_NAME="${REGISTRY}/${REPO_NAME}:${IMAGE_TAG}"

          build_args=()
          if [[ -n "${BUILD_ARGS}" ]]; then
            while IFS='=' read -r key value; do
              [[ -z "$key" ]] && continue
              build_args+=(--build-arg "$key=$value")
            done <<< "${BUILD_ARGS}"
          fi

          docker build \
            "${build_args[@]}" \
            --file "${{ matrix.dockerfile }}" \
            --tag "${IMAGE_NAME}" \
            "${{ matrix.module }}"
          docker push "${IMAGE_NAME}"

          if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            LATEST_IMAGE="${REGISTRY}/${REPO_NAME}:latest"
            docker tag "${IMAGE_NAME}" "${LATEST_IMAGE}"
            docker push "${LATEST_IMAGE}"
          fi

      - name: Summarise image
        env:
          REGISTRY: ${{ steps.aws.outputs.registry || secrets.ECR_REGISTRY || vars.ECR_REGISTRY }}
        run: |
          REPO_NAME="${ECR_REPOSITORY_PREFIX}-${{ matrix.id }}"
          echo "Built and pushed ${REGISTRY}/${REPO_NAME}:${GITHUB_SHA}" >> "$GITHUB_STEP_SUMMARY"
          if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            echo "Tagged ${REGISTRY}/${REPO_NAME}:latest" >> "$GITHUB_STEP_SUMMARY"
          fi
